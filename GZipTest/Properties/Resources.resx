<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrAttemptingInsertAnElementAfterEnding" xml:space="preserve">
    <value>Attempting to insert an element after an ending work item</value>
  </data>
  <data name="ErrDriveNotFound" xml:space="preserve">
    <value>The drive specified in path is invalid.</value>
  </data>
  <data name="ErrEndOfStream" xml:space="preserve">
    <value>The end of stream was not be found.</value>
  </data>
  <data name="ErrFileLoad" xml:space="preserve">
    <value>The file can not be loaded.</value>
  </data>
  <data name="ErrFileOrDictionaryAlreadyExists" xml:space="preserve">
    <value>The file or dictionary already exists.</value>
  </data>
  <data name="ErrInvalidArgs" xml:space="preserve">
    <value>Arguments set incorrectly.</value>
  </data>
  <data name="ErrlnvaidTypeOfFirstWorkItem" xml:space="preserve">
    <value>First work item is not of type WorkItemBaseStart</value>
  </data>
  <data name="ErrlnvaidTypeOfLastWorkItem" xml:space="preserve">
    <value>Last work item is not of type WorkItemBaseEnd.</value>
  </data>
  <data name="ErrNoAnyWorkItemBaseEnd" xml:space="preserve">
    <value>Work items have no item of type WorkItemBaseEnd.</value>
  </data>
  <data name="ErrNoAnyWorkItemBaseStart" xml:space="preserve">
    <value>Work items have no item of type WorkItemBaseStart.</value>
  </data>
  <data name="ErrNotEnoughDiskSpace" xml:space="preserve">
    <value>Not enough disk space</value>
  </data>
  <data name="ErrNotFoundFileOrDirectory" xml:space="preserve">
    <value>The file or directory cannot be found.</value>
  </data>
  <data name="ErrOutOfMemory" xml:space="preserve">
    <value>Out of Memory</value>
  </data>
  <data name="ErrPathTooLong" xml:space="preserve">
    <value>The path exceeds the maxium supported path length.</value>
  </data>
  <data name="ErrSeveralEndWorkItems" xml:space="preserve">
    <value>Work items have not to contain more than one element of type WorkItemBaseEnd</value>
  </data>
  <data name="ErrSeveralStartWorkItems" xml:space="preserve">
    <value>Work items have not to contain more than one element of type WorkItemBaseStart</value>
  </data>
  <data name="ErrSharingViolation" xml:space="preserve">
    <value>There is a sharing violation.</value>
  </data>
  <data name="ErrUnauthorizedAccess" xml:space="preserve">
    <value>Denied permissions to file access.</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>&gt;GZipTest.exe
&gt;GZipTest.exe /?
Displays this help.

&gt;GZipTest.exe compress &lt;path to the source file&gt; [&lt;path to the result file&gt;]
Compresses the source file and writes the result to the resulting file.
If &lt;path to the result file&gt; is not specified, the resulting file is created in the same directory as the source file with adding the extension ".gz".

&gt;GZipTest.exe decompress &lt;path to the source file&gt; &lt;path to the result file&gt;
Decompresses the source file and writes the result to the resulting file.

If successful, the program returns 0, otherwise 1.</value>
  </data>
  <data name="HelpHeader" xml:space="preserve">
    <value>Test task for Veeam made by Igor Gubin 02.2020.</value>
  </data>
  <data name="TmplateErrIOHresult" xml:space="preserve">
    <value>An IO exception occurred: {0}</value>
  </data>
</root>